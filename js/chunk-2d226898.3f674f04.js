(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d226898"],{e8a0:function(s,e,t){"use strict";t.r(e);var a=function(){var s=this,e=s.$createElement;s._self._c;return s._m(0)},r=[function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("section",[t("h1",[s._v("Keycloak Express Openid-client")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd6paztfgofophghmtpy.png",alt:"banner"}})]),t("p",[s._v("Keycloak is "),t("a",{attrs:{href:"https://www.keycloak.org/2022/02/adapter-deprecation"}},[s._v("deprecating")]),s._v(" their client adapters (keycloak-connect) for Node and recommending openid-client as a replacement.")]),t("h2",[s._v("Setup Keycloak")]),t("p",[s._v("First I "),t("a",{attrs:{href:"https://www.keycloak.org/downloads"}},[s._v("download keycloak")]),s._v(" extract it and you can run it with the following command")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("bin/kc.sh start-dev\n")])]),t("p",[s._v("You can then login http://localhost:8080, first time you do keycloak asks you to set an admin user and password.")]),t("p",[s._v("Create a Realm and give it an name and create it. I am using keycloak-express for my realm name")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0erj948wmmrbng0v14l.gif",alt:"Create realm"}})]),t("p",[s._v("The create a Client using openid-connect in the Realm")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wctbp51o639k3hgu16q0.gif",alt:"Create a client"}})]),t("p",[s._v("Set the Valid Redirect URIs and select save.")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07crr8q4tmtovxodehgq.gif",alt:"set valid redirect URIs"}})]),t("p",[t("strong",[s._v("NOTE")]),s._v(":you can specify specific routes here but I am using a wild card(not recommend best practice)")]),t("p",[s._v("Create a user its documented "),t("a",{attrs:{href:"https://www.keycloak.org/docs/latest/server_admin/index.html#proc-creating-user_server_administration_guide"}},[s._v("here")]),s._v(" so I won't go into it.")]),t("p",[s._v("That's it for Keycloak setup")]),t("h2",[s._v("Setup Openid-client with Passport in Express")]),t("p",[s._v("We are going to use this "),t("a",{attrs:{href:"https://www.npmjs.com/package/openid-client"}},[s._v("openid-client")]),s._v(" and "),t("a",{attrs:{href:"https://www.npmjs.com/package/passport"}},[s._v("passport")]),s._v(" to connect to keycloak. I install the following")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("npm install passport\nnpm install openid-client\nnpm install express-session\nnpm install express\n")])]),t("p",[s._v("From the Realm we need the openid-configuration can be got from an endpoint")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[s._v("/realms/{realm-name}/.well-known/openid-configuration\n")])]),t("p",[s._v("So in my case the realm name is keycloak-express so the url will be http://localhost:8080/realms/keycloak-express/.well-known/openid-configuration the output is as follows")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruaxgvsvycdhubwhm7b1.png",alt:".well-known url output"}})]),t("p",[s._v("All we need is this "),t("code",{pre:!0},[s._v('issuer:"http://localhost:8080/realms/keycloak-express"')]),s._v(" url to connect openid-client to keycloak as follows")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("'use strict'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" express "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'express'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" { Issuer, Strategy } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'openid-client'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" passport "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'passport'")]),s._v(";\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" expressSession "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'express-session'")]),s._v(";\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" app = express();\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// use the issuer url here")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" keycloakIssuer = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("await")]),s._v(" Issuer.discover("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://localhost:8080/realms/keycloak-express'")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// don't think I should be console.logging this but its only a demo app")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// nothing bad ever happens from following the docs :)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Discovered issuer %s %O'")]),s._v(", keycloakIssuer.issuer, keycloakIssuer.metadata);\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// client_id and client_secret can be what ever you want")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// may be worth setting them up as env vars ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" client = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" keycloakIssuer.Client({\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("client_id")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'keycloak-express'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("client_secret")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'long_secret-here'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("redirect_uris")]),s._v(": ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://localhost:3000/auth/callback'")]),s._v("],\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("post_logout_redirect_uris")]),s._v(": ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'http://localhost:3000/logout/callback'")]),s._v("],\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("response_types")]),s._v(": ["),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'code'")]),s._v("],\n  });\n")])]),t("p",[s._v("I then setup express sessions")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" memoryStore = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" expressSession.MemoryStore();\napp.use(\n    expressSession({\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("secret")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'another_long_secret'")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("resave")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("false")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("saveUninitialized")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("store")]),s._v(": memoryStore\n    })\n);\n")])]),t("p",[s._v("Then setup passport to use open connect id strategy")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("app.use(passport.initialize());\napp.use(passport.authenticate("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'session'")]),s._v("));\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// this creates the strategy")]),s._v("\npassport.use("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'oidc'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" Strategy({client}, (tokenSet, userinfo, done)=>{\n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" done("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", tokenSet.claims());\n    })\n)\n\npassport.serializeUser("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("user, done")]),s._v(") ")]),s._v("{\n    done("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", user);\n  });\npassport.deserializeUser("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("user, done")]),s._v(") ")]),s._v("{\n    done("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("null")]),s._v(", user);\n});\n")])]),t("p",[s._v("Most of above is copied from the passport docs, I found "),t("a",{attrs:{href:"https://medium.com/@prashantramnyc/node-js-with-passport-authentication-simplified-76ca65ee91e5"}},[s._v("this blog")]),s._v(" helpful in explaining serialize/deserialize.")]),t("p",[s._v("Next I setup the authentication route this makes use of the the callback "),t("code",{pre:!0},[s._v("redirect_uris:")]),s._v(" from the "),t("code",{pre:!0},[s._v("keycloakIssuer.Client")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// default protected route /test")]),s._v("\napp.get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/test'")]),s._v(", (req, res, next) => {\n    passport.authenticate("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'oidc'")]),s._v(")(req, res, next);\n});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// callback always routes to test ")]),s._v("\napp.get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/auth/callback'")]),s._v(", (req, res, next) => {\n    passport.authenticate("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'oidc'")]),s._v(", {\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("successRedirect")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/testauth'")]),s._v(",\n      "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v("failureRedirect")]),s._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/'")]),s._v("\n    })(req, res, next);\n});\n")])]),t("p",[s._v("I then setup a function to check if a route is authenticated")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// function to check weather user is authenticated, req.isAuthenticated is populated by password.js")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// use this function to protect all routes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" checkAuthenticated = "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("req, res, next")]),s._v(") =>")]),s._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (req.isAuthenticated()) { \n        "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" next() \n    }\n    res.redirect("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"/test"')]),s._v(")\n}\n")])]),t("p",[s._v("This can then be used on protected routes")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("app.get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/testauth'")]),s._v(", checkAuthenticated, (req, res) => {\n    res.render("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'test'")]),s._v(");\n});\n\napp.get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/other'")]),s._v(", checkAuthenticated, (req, res) => {\n    res.render("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'other'")]),s._v(");\n});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//unprotected route")]),s._v("\napp.get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/'")]),s._v(","),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("req,res")]),s._v(")")]),s._v("{\n    res.render("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'index'")]),s._v(");\n});\n")])]),t("p",[s._v("Finally I set the logout route up this also uses a callback "),t("code",{pre:!0},[s._v("post_logout_redirect_uris")]),s._v(" from the "),t("code",{pre:!0},[s._v("keycloakIssuer.Client")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// start logout request")]),s._v("\napp.get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/logout'")]),s._v(", (req, res) => {\n    res.redirect(client.endSessionUrl());\n});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// logout callback")]),s._v("\napp.get("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/logout/callback'")]),s._v(", (req, res) => {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// clears the persisted user from the local storage")]),s._v("\n    req.logout();\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// redirects the user to a public route")]),s._v("\n    res.redirect("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'/'")]),s._v(");\n});\n")])]),t("p",[s._v("And set the app to listen")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[s._v("app.listen("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3000")]),s._v(", "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n  "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Listening at http://localhost:3000'")]),s._v(");\n});\n")])]),t("p",[s._v("Repo "),t("a",{attrs:{href:"https://github.com/austincunningham/keycloak-express-openid-client"}},[s._v("here")]),s._v(" with some extra code around views. Looks like this")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auslqsikfxvsfvkp1lz4.gif",alt:"login flow"}})])])}],n=t("2877"),p={},l=Object(n["a"])(p,a,r,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d226898.3f674f04.js.map