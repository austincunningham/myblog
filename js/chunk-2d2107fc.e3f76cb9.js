(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2107fc"],{b7c4:function(t,e,s){"use strict";s.r(e);var r=function(){var t=this,e=t.$createElement;t._self._c;return t._m(0)},a=[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("section",[s("h1",[t._v("Build a Kubernetes Operator")]),s("p",[s("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg59bnxb16y3cv709e4w.jpg",alt:""}})]),s("h2",[t._v("Prerequisites :")]),s("p",[t._v("Kubernetes cluster (as I am going to be adding some Openshift native resources I will be using CRC which is a local dev kubernetes cluster you can install on your pc)")]),s("p",[t._v("Cluster admin access to that cluster")]),s("h2",[t._v("Using the Operator-sdk to bootstrap your project")]),s("p",[t._v("First what is an Kubernetes operator? Operators allow you to extend the Kubernetes API by adding you own custom resources to a cluster. This is the most basic operator I can make, It will create a pod for a micro service and create a route for the micro service and allow you to specify the amount of replicas. I will outline all the steps I have take. First I use the generate command to scaffold the operator project.")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t._v("mkdir pod-route\n"),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("cd")]),t._v(" pod-route\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# --domain example.com is used in the operator-sdk quickstart guide this is used to create the api group, think of package in java. ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# This was my first gotcha following my misreading of the docs. You need to be careful when choosing domain name as is difficult to revert after its generated.I will continue with quay.io for now.  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# --repo is your git repo where you operator code will live ")]),t._v("\noperator-sdk init --domain quay.io --repo github.com/austincunningham/pod-route\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# Add a controller")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# --version I use v1alpha1 (this is a Kubernetes API version for early candidates)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# --kind name of Custom Resource")]),t._v("\noperator-sdk create api --version v1alpha1 --kind Podroute --resource --controller\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v('# build and push the operator image make docker-build docker-push IMG="quay.io/austincunningham/pod-route:v0.0.1"')]),t._v("\n")])]),s("p",[t._v("Your files should look like "),s("a",{attrs:{href:"https://github.com/austincunningham/pod-route/pull/2"}},[t._v("this")]),t._v(" and the container "),s("a",{attrs:{href:"https://quay.io/repository/austincunningham/pod-route"}},[t._v("repo")]),t._v(" is pushed\nNext I edit my "),s("code",{pre:!0},[t._v("api/v1alpha1/podroute_types.go")]),t._v(" file spec "),s("code",{pre:!0},[t._v("PodrouteSpec")]),t._v(". The spec is basically what I want to be managed by the operator.")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// PodrouteSpec defines the desired state of Podroute")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("type")]),t._v(" PodrouteSpec "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("struct")]),t._v(" {\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v('// Image container image string e.g. "quay.io/austincunningham/always200:latest"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// Replicas number of containers to spin up")]),t._v("\n\tImage "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('`json:"image,omitempty"`')]),t._v("\n\tReplicas "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("int32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('`json:"replicas,omitempty"`')]),t._v("\n} \n")])]),s("p",[t._v("After changing the types file we need to update the files in the operator run the following commands")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t._v("make generate\nmake manifests\n")])]),s("h2",[t._v("Add your controller logic")]),s("p",[t._v("Now I can start looking at my reconcile logic in "),s("code",{pre:!0},[t._v("controllers/podroute_controller.go")]),t._v(" we add some RBAC rules for pods and deployments and do a client get on the cluster to find the Custom Resource(CR). The rest of this is generated code.")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("package")]),t._v(" controllers\n\n"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("import")]),t._v(" (\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"context"')]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"k8s.io/apimachinery/pkg/runtime"')]),t._v("\n\tctrl "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime/pkg/client"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime/pkg/log"')]),t._v("\n\n\tquayiov1alpha1 "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"github.com/austincunningham/pod-route/api/v1alpha1"')]),t._v("\n)\n\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// PodrouteReconciler reconciles a Podroute object")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("type")]),t._v(" PodrouteReconciler "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("struct")]),t._v(" {\n\tclient.Client\n\tScheme *runtime.Scheme\n}\n\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//+kubebuilder:rbac:groups=quay.io,resources=podroutes,verbs=get;list;watch;create;update;patch;delete")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//+kubebuilder:rbac:groups=quay.io,resources=podroutes/status,verbs=get;update;patch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//+kubebuilder:rbac:groups=quay.io,resources=podroutes/finalizers,verbs=update")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//+kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//+kubebuilder:rbac:groups=core,resources=pods,verbs=get;list;")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r *PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("Reconcile")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(ctx context.Context, req ctrl.Request)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(ctrl.Result, error)")])]),t._v(" {\n\t_ = log.FromContext(ctx)\n\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// your logic here")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// Create a Custom Resource object for Podroute, quayio part of the name is due to my earlier mistake")]),t._v("\n\tcr := &quayiov1alpha1.Podroute{}\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// do a kubernetes client get to check if the CR is on the Cluster")]),t._v("\n\terr := r.Client.Get(ctx, req.NamespacedName, cr)\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" ctrl.Result{}, err\n\t}\n\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" ctrl.Result{}, "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v("\n}\n\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// SetupWithManager sets up the controller with the Manager.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r *PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("SetupWithManager")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(mgr ctrl.Manager)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("error")])]),t._v(" {\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" ctrl.NewControllerManagedBy(mgr).\n\t\tFor(&quayiov1alpha1.Podroute{}).\n\t\tComplete(r)\n}\n")])]),s("p",[t._v("So the first thing I need to do is check for a existing deployment and if it doesn't exist create it.\nIn the "),s("code",{pre:!0},[t._v("Reconcile")]),t._v(" function before the last "),s("code",{pre:!0},[t._v("return ctrl.Result{}, nil")]),t._v(" add a call to createDeployment function like so")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[t._v("\tdeployment, err := r.createDeployment(cr, r.podRouteDeployment(cr))\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" reconcile.Result{}, err\n\t}\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// just logging here to keep Go happy will use later")]),t._v("\n\tlog.Log.Info("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"deployment"')]),t._v(", deployment)\n")])]),s("p",[t._v("I create a labels function as will be using this for all resources")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("labels")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(cr *quayiov1alpha1.Podroute, tier "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("string")]),t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("map")]),t._v("["),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("string")]),t._v("]"),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("string")])]),t._v(" {\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// Fetches and sets labels")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("map")]),t._v("["),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("string")]),t._v("]"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("string")]),t._v("{\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"app"')]),t._v(":         "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"PodRoute"')]),t._v(",\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"podroute_cr"')]),t._v(": cr.Name,\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"tier"')]),t._v(":        tier,\n\t}\n}\n")])]),s("p",[t._v("I create a deployment object")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// This is the equivalent of creating a deployment yaml and returning it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// It doesn't create anything on cluster")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r *PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("podRouteDeployment")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(cr *quayiov1alpha1.Podroute)")]),t._v(" *"),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("appsv1")]),t._v("."),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("Deployment")])]),t._v(" {\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// Build a Deployment")]),t._v("\n\tlabels := labels(cr, "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"backend-podroute"')]),t._v(")\n\tsize := cr.Spec.Replicas\n\tpodRouteDeployment := &appsv1.Deployment{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"pod-route"')]),t._v(",\n\t\t\tNamespace: cr.Namespace,\n\t\t},\n\t\tSpec: appsv1.DeploymentSpec{\n\t\t\tReplicas: &size,\n\t\t\tSelector: &metav1.LabelSelector{\n\t\t\t\tMatchLabels: labels,\n\t\t\t},\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tLabels: labels,\n\t\t\t\t},\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tContainers: []corev1.Container{{\n\t\t\t\t\t\tImage:           cr.Spec.Image,\n\t\t\t\t\t\tImagePullPolicy: corev1.PullAlways,\n\t\t\t\t\t\tName:            "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"podroute-pod"')]),t._v(",\n\t\t\t\t\t\tPorts: []corev1.ContainerPort{{\n\t\t\t\t\t\t\tContainerPort: "),s("span",{pre:!0,attrs:{class:"hljs-number"}},[t._v("8080")]),t._v(",\n\t\t\t\t\t\t\tName:          "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"podroute"')]),t._v(",\n\t\t\t\t\t\t}},\n\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// sets the this controller as owner")]),t._v("\n\tcontrollerutil.SetControllerReference(cr, podRouteDeployment, r.Scheme)\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" podRouteDeployment\n}\n")])]),s("p",[t._v("I check the cluster using Client.Get for an existing deployment if not then create one using the deployment object created above.")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// check for a deployment if it doesn't exist it creates one on cluster using the deployment created in deployment")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("createDeployment")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(cr *quayiov1alpha1.Podroute, deployment *appsv1.Deployment)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(*appsv1.Deployment, error)")])]),t._v(" {\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// check for a deployment in the namespace")]),t._v("\n\tfound := &appsv1.Deployment{}\n\terr := r.Client.Get(context.TODO(), types.NamespacedName{Name: deployment.Name, Namespace: cr.Namespace}, found)\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\tlog.Log.Info("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"Creating Deployment"')]),t._v(")\n\t\terr = r.Client.Create(context.TODO(), deployment)\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\t\tlog.Log.Error(err, "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"Failed to create deployment"')]),t._v(")\n\t\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" found, err\n\t\t}\n\t}\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" found, "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v("\n}\n")])]),s("p",[t._v("Next I check if the deployment replicas match the number in the CR(Custom Resource) in the Reconcile function remove the comment "),s("code",{pre:!0},[t._v('log.Log.Info("deployment", deployment)')]),t._v(" and replace it with")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[t._v("\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// If the spec.Replicas in the CR changes, update the deployment number of replicas")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" deployment.Spec.Replicas != &cr.Spec.Replicas {\n\t\tcontrollerutil.CreateOrUpdate(context.TODO(), r.Client, deployment, "),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("()")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("error")])]),t._v(" {\n\t\t\tdeployment.Spec.Replicas = &cr.Spec.Replicas\n\t\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v("\n\t\t})\n\t}\n")])]),s("p",[t._v("So what have we done so far we have a CR that takes in a image(container) and number of replicas and creates a deployment for it. Next we will create the Service and the route , These will have a similar pattern to the deployment i.e. create an route/service object and check if it exists if not create. We will start with the service. In the reconcile function before the last return add a createService function call "),s("code",{pre:!0},[t._v("return ctrl.Result{}, nil")])]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[t._v("\terr = r.createService(cr, r.podRouteService(cr))\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" reconcile.Result{}, err\n\t}\n")])]),s("p",[t._v("Use this function to create the service object")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// This is the equivalent of creating a service yaml and returning it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// It doesnt create anything on cluster")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("podRouteService")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(cr *quayiov1alpha1.Podroute)")]),t._v(" *"),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("corev1")]),t._v("."),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("Service")])]),t._v(" {\n\tlabels := labels(cr, "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"backend-podroute"')]),t._v(")\n\n\tpodRouteService := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"podroute-service"')]),t._v(",\n\t\t\tNamespace: cr.Namespace,\n\t\t},\n\t\tSpec: corev1.ServiceSpec{\n\t\t\tSelector: labels,\n\t\t\tPorts: []corev1.ServicePort{{\n\t\t\t\tProtocol:   corev1.ProtocolTCP,\n\t\t\t\tPort:       "),s("span",{pre:!0,attrs:{class:"hljs-number"}},[t._v("8080")]),t._v(",\n\t\t\t\tTargetPort: intstr.FromInt("),s("span",{pre:!0,attrs:{class:"hljs-number"}},[t._v("8080")]),t._v("),\n\t\t\t}},\n\t\t},\n\t}\n\n\tcontrollerutil.SetControllerReference(cr, podRouteService, r.Scheme)\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" podRouteService\n}\n")])]),s("p",[t._v("Add a function to create the service from the service object above")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// check for a service if it doesn't exist it creates one on cluster using the service created in podRouteService")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("createService")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(cr *quayiov1alpha1.Podroute, podRouteServcie *corev1.Service)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("error")])]),t._v(" {\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// check for a service in the namespace")]),t._v("\n\tfound := &corev1.Service{}\n\terr := r.Client.Get(context.TODO(), types.NamespacedName{Name: podRouteServcie.Name, Namespace: cr.Namespace}, found)\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\tlog.Log.Info("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"Creating Service"')]),t._v(")\n\t\terr = r.Client.Create(context.TODO(), podRouteServcie)\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\t\tlog.Log.Error(err, "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"Failed to create Service"')]),t._v(")\n\t\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" err\n\t\t}\n\t}\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v("\n}\n")])]),s("p",[t._v("And finally the Route add createRoute function call in the Reconcile before the last "),s("code",{pre:!0},[t._v("return ctrl.Result{}, nil")])]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[t._v("\terr = r.createRoute(cr, r.podRouteRoute(cr))\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v("{\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" reconcile.Result{}, err\n\t}\n")])]),s("p",[t._v("Create a function for the route object")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// This is the equivalent of creating a route yaml file and returning it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// It doesn't create anything on cluster")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("podRouteRoute")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(cr *quayiov1alpha1.Podroute)")]),t._v(" *"),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("routev1")]),t._v("."),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("Route")])]),t._v(" {\n\tlabels := labels(cr, "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"backend-podroute"')]),t._v(")\n\n\tpodRouteRoute := &routev1.Route{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"podroute-route"')]),t._v(",\n\t\t\tNamespace: cr.Namespace,\n\t\t\tLabels:    labels,\n\t\t},\n\t\tSpec: routev1.RouteSpec{\n\t\t\tTo: routev1.RouteTargetReference{\n\t\t\t\tKind: "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"Service"')]),t._v(",\n\t\t\t\tName: "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"podroute-service"')]),t._v(",\n\t\t\t},\n\t\t\tPort: &routev1.RoutePort{\n\t\t\t\tTargetPort: intstr.FromInt("),s("span",{pre:!0,attrs:{class:"hljs-number"}},[t._v("8080")]),t._v("),\n\t\t\t},\n\t\t},\n\t}\n\tcontrollerutil.SetControllerReference(cr, podRouteRoute, r.Scheme)\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" podRouteRoute\n}\n")])]),s("p",[t._v("Add a function to create the route from the route object above")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// check for a route if it doesn't exist it creates one on cluster using the route created in podRouteRoute")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(r PodrouteReconciler)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("createRoute")]),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("(cr *quayiov1alpha1.Podroute, podRouteRoute *routev1.Route)")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-title"}},[t._v("error")])]),t._v(" {\n\t"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// check for a route in the namespace")]),t._v("\n\tfound := &routev1.Route{}\n\terr := r.Client.Get(context.TODO(), types.NamespacedName{Name: podRouteRoute.Name, Namespace: cr.Namespace}, found)\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\tlog.Log.Info("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"Creating Route"')]),t._v(")\n\t\terr = r.Client.Create(context.TODO(), podRouteRoute)\n\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\t\tlog.Log.Error(err, "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"Failed to create Route"')]),t._v(")\n\t\t\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" err\n\t\t}\n\t}\n\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v("\n}\n")])]),s("blockquote",[s("p",[s("strong",[t._v("NOTE:")]),t._v(" imports did change with these code changes")])]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("import")]),t._v(" (\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"context"')]),t._v("\n\tmetav1 "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"k8s.io/apimachinery/pkg/apis/meta/v1"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"k8s.io/apimachinery/pkg/types"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"k8s.io/apimachinery/pkg/util/intstr"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime/pkg/reconcile"')]),t._v("\n\n\troutev1 "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"github.com/openshift/api/route/v1"')]),t._v("\n\tappsv1 "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"k8s.io/api/apps/v1"')]),t._v("\n\tcorev1 "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"k8s.io/api/core/v1"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"k8s.io/apimachinery/pkg/runtime"')]),t._v("\n\tctrl "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime/pkg/client"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"sigs.k8s.io/controller-runtime/pkg/log"')]),t._v("\n\n\tquayiov1alpha1 "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"github.com/austincunningham/pod-route/api/v1alpha1"')]),t._v("\n)\n")])]),s("p",[t._v("Also because route is an openshift thing and not kubernetes native I had to add it to the scheme in the main.go file")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-go"}},[t._v("\t"),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" err := routev1.AddToScheme(mgr.GetScheme()); err != "),s("span",{pre:!0,attrs:{class:"hljs-literal"}},[t._v("nil")]),t._v(" {\n\t\tsetupLog.Error(err, "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"failed to add routev1 to scheme"')]),t._v(")\n\t\tos.Exit("),s("span",{pre:!0,attrs:{class:"hljs-number"}},[t._v("1")]),t._v(")\n\t}\n")])]),s("h2",[t._v("Testing your Operator")]),s("p",[t._v("Start up CRC ([code ready containers] (https://developers.redhat.com/products/openshift-local/overview)) with "),s("code",{pre:!0},[t._v("crc start")])]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t._v("crc start\nINFO Adding crc-admin and crc-developer contexts to kubeconfig... \nStarted the OpenShift cluster.\n\nThe server is accessible via web console at:\n  https://console-openshift-console.apps-crc.testing\n\nLog "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("in")]),t._v(" as administrator:\n  Username: kubeadmin\n  Password: KUBEADMIN_PASSWORD\n\nLog "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("in")]),t._v(" as user:\n  Username: developer\n  Password: developer\n\nUse the "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v("'oc'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("command")]),t._v(" line interface:\n  $ "),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("eval")]),t._v(" $(crc oc-env)\n  $ oc login -u developer https://api.crc.testing:6443\n")])]),s("p",[t._v("Login to the CRC cluster as kubeadmin")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t._v("oc login -u kubeadmin -p KUBEADMIN_PASSWORD https://api.crc.testing:6443\n")])]),s("p",[t._v("Create a project, the Makefile has a a lot of commands generated by the opeator-sdk which we can use")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t._v("oc new-project podroute\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# Installs the custom resource definitions onto the cluster")]),t._v("\nmake install\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# Create the CR on cluster")]),t._v("\noc apply -f - <<EOF\n---\napiVersion: quay.io/v1alpha1\nkind: Podroute\nmetadata:\n  name: "),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("test")]),t._v("-podroute\n  namespace: podroute\nspec:\n  image: quay.io/austincunningham/always200:latest\n  replicas: 3\nEOF\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# We can then run the operator locally")]),t._v("\nmake run\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# Should see something like")]),t._v("\n2022-06-10T14:41:28.854+0100\tINFO\tCreating Deployment\n2022-06-10T14:41:28.980+0100\tINFO\tCreating Service\n2022-06-10T14:41:29.114+0100\tINFO\tCreating Route\n")])]),s("p",[t._v("You can confirm everything is up")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# get the servic")]),t._v("\noc get service\nNAME               TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE\npodroute-service   ClusterIP   10.217.5.14   <none>        8080/TCP   4m38s\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# get the route")]),t._v("\noc get route\nNAME             HOST/PORT                                  PATH   SERVICES           PORT   TERMINATION   WILDCARD\npodroute-route   podroute-route-podroute.apps-crc.testing          podroute-service   8080                 None\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# should be 3 pod replicas ")]),t._v("\noc get pods\nNAME                        READY   STATUS    RESTARTS   AGE\npod-route-96b87c455-6sw2h   1/1     Running   0          4m12s\npod-route-96b87c455-ghdm8   1/1     Running   0          4m12s\npod-route-96b87c455-md426   1/1     Running   0          4m12s\n"),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("# the get route should be alive and return ok")]),t._v("\ncurl http://podroute-route-podroute.apps-crc.testing/get\nOK%  \n")])]),s("p",[t._v("Reference:")]),s("p",[s("a",{attrs:{href:"https://sdk.operatorframework.io/docs/building-operators/golang/quickstart/"}},[t._v("Operator-sdk quickstart guide")])]),s("p",[s("a",{attrs:{href:"https://sdk.operatorframework.io/docs/building-operators/golang/tutorial/"}},[t._v("Operator-sdk Golang tutorial")])]),s("p",[s("a",{attrs:{href:"https://github.com/austincunningham/pod-route"}},[t._v("Git repo")])]),s("blockquote",[s("p",[s("strong",[t._v("NOTE:")]),t._v(" build with operator-sdk v1.15.0")])])])}],n=s("2877"),o={},l=Object(n["a"])(o,r,a,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d2107fc.e3f76cb9.js.map