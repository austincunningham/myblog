(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0df80b"],{"89d8":function(s,e,t){"use strict";t.r(e);var a=function(){var s=this,e=s.$createElement;s._self._c;return s._m(0)},r=[function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("section",[t("h1",[s._v("Upgrading Postgresql-v10 to v13 on Openshift")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k42vumrw4xmdzhumwlig.png",alt:""}})]),t("p",[s._v("On Openshift v4 cluster I am looking to upgrade Postgresql-v10 to Postgersql-V13. For the sake of this blog I will spin up a Posgresql-v10 first via the Openshift templates")]),t("p",[t("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgywm33xr78g12q1nkxq.gif",alt:"create a postgresql v10 via Openshift templates"}})]),t("blockquote",[t("p",[t("strong",[s._v("NOTE:")]),s._v(" I am using quay.io registry here, you can use the "),t("a",{attrs:{href:"https://catalog.redhat.com/software/containers/search?q=postgresql&p=1"}},[s._v("Red Hat certified images")]),s._v(" also")])]),t("p",[s._v("Can we just change the image in the deploymentConfig to "),t("code",{pre:!0},[s._v("quay.io/centos7/postgresql-13-centos7")]),s._v(" ?")]),t("p",[s._v("Unfortunately your postgresql pod will crash with the following error")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("Incompatible data directory. This container image provides\nPostgreSQL "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'13'")]),s._v(", but data directory is of\nversion "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'10'")]),s._v(".\nThis image supports automatic data directory upgrade from\n"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'12'")]),s._v(", please _carefully_ consult image documentation\nabout how to use the "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'$POSTGRESQL_UPGRADE'")]),s._v(" startup option.\n")])]),t("p",[s._v("This does give us a hit on how to solve the issue but it looks like we need to upgrade through the versions of Postgresql. After a bit of reading about "),t("a",{attrs:{href:"https://catalog.redhat.com/software/containers/rhel8/postgresql-12/5db133bd5a13461646df330b"}},[s._v("$POSTGRESQL_UPGRADE")]),s._v(" we have two options for this env var, "),t("strong",[s._v("copy")]),s._v(" and "),t("strong",[s._v("hardlink")]),s._v(". Using "),t("strong",[s._v("copy")]),s._v(" seems to be the lowest risk upgrade. I  found we can go from")]),t("ul",[t("li",[s._v("Postgresql 10 - 12")]),t("li",[s._v("Postgresql 12 - 13")])]),t("blockquote",[t("p",[t("strong",[s._v("NOTE:")]),s._v(" $POSTGRESQL_UPGRADE does come with the usually warnings about backing up your data before upgrading your DB. And you should be comfortable with restoring from a back up.")])]),t("h2",[s._v("Postgresql 10 to 12")]),t("p",[s._v("Before we can patch the deployment config image we need to remove the imageChange deployment config trigger as it will revert any image change")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# remove all")]),s._v("\noc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" triggers dc/postgresql --remove-all\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# add back in the config change trigger")]),s._v("\noc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" triggers dc/postgresql --from-config\n")])]),t("p",[s._v("We can then patch the image in the deployment config to v12 "),t("code",{pre:!0},[s._v("quay.io/centos7/postgresql-12-centos7")]),s._v(" with this ugly one-liner patch command")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("oc patch dc postgresql -n postgresql-test --"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("type")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'json'")]),s._v(" -p="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('\'[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"quay.io/centos7/postgresql-12-centos7"}]\'')]),s._v("\n")])]),t("p",[s._v("This will cause a new roll out.")]),t("blockquote",[t("p",[t("strong",[s._v("NOTE:")]),s._v(" I use a lot of cli commands as I am looking to eventually automate this in a script. You can also achieved the same by manually editing the image in the deploymentConfig.")])]),t("p",[s._v("The roll out will have a pod in crashloopbackoff due to not having the "),t("code",{pre:!0},[s._v("$POSTGRESQL_UPGRADE")]),s._v(" env var set. We can  set the environment variable in the deploymentConfig with the following command")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("oc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" env dc/postgresql -n postgresql-test POSTGRESQL_UPGRADE=copy\n")])]),t("p",[s._v("This will cause another roll out. Occasionally I found that this upgrade can fail with the following error")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("pg_ctl: another server might be running; trying to start server anyway\nwaiting "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" server to start....2023-02-03 14:14:21.615 UTC [45] FATAL:  lock file "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"postmaster.pid"')]),s._v(" already exists\n")])]),t("p",[s._v("So the long and the short of it is there is a lock file in place in postgresql and we need to shut down the postgresql service correctly to remove it. I ran the following commands before I set the "),t("code",{pre:!0},[s._v("$POSTGRESQL_UPGRADE")]),s._v(" env var.")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# get the non deployment pod name")]),s._v("\nPOD=$(oc get po --all-namespaces | grep "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"postgresql-"')]),s._v(" | awk "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'{print $2}'")]),s._v(" | grep -wv deploy)\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# first stop the postgres service note the paths used in the commands the postgresql database name 'userdata' in this case")]),s._v("\noc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("exec")]),s._v(" -it "),t("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$POD")]),s._v(" -c postgresql -n postgresql-test -- /usr/bin/pg_ctl stop -D /var/lib/pgsql/data/userdata\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# then remove the lock file to be sure")]),s._v("\noc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("exec")]),s._v(" -it "),t("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$POD")]),s._v(" -c system-postgresql -n "),t("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$THREESCALE_NS")]),s._v("  -- rm /var/lib/pgsql/data/userdata/postmaster.pid\n")])]),t("p",[s._v("I found that once the upgrade is finished the "),t("code",{pre:!0},[s._v("$POSTGRESQL_UPGRADE")]),s._v(" env var being set can cause some problems with future roll outs of the deploymentConfig e.g.")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("== WARNING!! ==\nPostgreSQL server version matches the datadir PG_VERSION.\nThe "),t("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$POSTGRESQL_UPGRADE")]),s._v(" makes no sense and you probably\nmade some mistake, keeping the variable "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" you might\nrisk a data loss "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" future!\n===============\n")])]),t("p",[s._v("So we must unset the "),t("code",{pre:!0},[s._v("$POSTGRESQL_UPGRADE")]),s._v(" env var")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("oc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" env dc/postgresql -n postgresql-test POSTGRESQL_UPGRADE-\n")])]),t("p",[s._v("This will cause another roll out and that will be stable with v12 installed. To confirm the upgrade was successful you can run the following command")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# run a postgres -V on the pod for postgresql, command finds the only pod that is not the deploy pod")]),s._v("\noc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("exec")]),s._v(" -it $(oc get po --all-namespaces | grep "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"postgresql-"')]),s._v(" | awk "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'{print $2}'")]),s._v(" | grep -wv deploy) -n postgresql-test -- postgres -V\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# should give you the version")]),s._v("\npostgres (PostgreSQL) 12.7\n")])]),t("h2",[s._v("Postgresql 12 to 13")]),t("p",[s._v("We can apply the same steps again for 12 to 13. First patch the image in the deploymentConfig to "),t("code",{pre:!0},[s._v("quay.io/centos7/postgresql-13-centos7")]),s._v(" again with the patch command")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("oc patch dc postgresql -n postgresql-test --"),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("type")]),s._v("="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'json'")]),s._v(" -p="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('\'[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"quay.io/centos7/postgresql-13-centos7"}]\'')]),s._v("\n")])]),t("p",[s._v("Again postgresql pod will crash with the following error")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("Incompatible data directory. This container image provides\nPostgreSQL "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'13'")]),s._v(", but data directory is of\nversion "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'12'")]),s._v(".\nThis image supports automatic data directory upgrade from\n"),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'12'")]),s._v(", please _carefully_ consult image documentation\nabout how to use the "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'$POSTGRESQL_UPGRADE'")]),s._v(" startup option.\n")])]),t("p",[s._v("set the environment variable with the following command")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("oc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" env dc/postgresql -n postgresql-test POSTGRESQL_UPGRADE=copy\n")])]),t("p",[s._v("This will cause another roll out.")]),t("p",[s._v("Again you need to unset the "),t("code",{pre:!0},[s._v("$POSTGRESQL_UPGRADE")]),s._v(" env var to avoid issues on future roll outs")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("oc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("set")]),s._v(" env dc/system-postgresql -n postgresql-test POSTGRESQL_UPGRADE-\n")])]),t("p",[s._v("This will cause another roll out and that will be stable with v13 installed.")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# run a postgres -v on the none deployment pod for posgres")]),s._v("\noc "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("exec")]),s._v(" -it $(oc get po --all-namespaces | grep "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"postgresql-"')]),s._v(" | awk "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'{print $2}'")]),s._v(" | grep -wv deploy) -n postgresql-test -- postgres -V\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# should give you the version")]),s._v("\npostgres (PostgreSQL) 13.3\n")])]),t("p",[s._v("All in all it took 7 changes to the deploymentConfig to successfully upgrade.")])])}],o=t("2877"),n={},l=Object(o["a"])(n,a,r,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0df80b.5d2315ff.js.map