(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0abfad"],{"181a":function(s,a,e){"use strict";e.r(a);var t=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},n=[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("section",[e("h1",[s._v("AI-Powered Kubernetes Debugging with Python and Ollama")]),e("p",[e("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ych0mu33kmfdbt0k8hat.png",alt:""}})]),e("p",[s._v("More playing around with AI development. Decided to see if I could build something useful. As I work with Kubernetes I thought I would build some sort of pod troubleshooter.")]),e("h2",[s._v("What It Does")]),e("p",[s._v("This script does the heavy lifting in Kubernetes pod debugging:")]),e("ol",[e("li",[s._v("Scans a namespace for failing pods")]),e("li",[s._v("Collects diagnostics: "),e("code",{pre:!0},[s._v("describe")]),s._v(", "),e("code",{pre:!0},[s._v("logs")]),s._v(", and "),e("code",{pre:!0},[s._v("events")])]),e("li",[s._v("Sends the info to "),e("a",{attrs:{href:"https://ollama.com"}},[s._v("Ollama")]),s._v(" running "),e("code",{pre:!0},[s._v("llama3")])]),e("li",[s._v("Displays a full AI-generated root cause analysis")])]),e("h2",[s._v("Requirements")]),e("ul",[e("li",[s._v("Python 3.9+")]),e("li",[e("a",{attrs:{href:"https://github.com/Textualize/rich"}},[e("code",{pre:!0},[s._v("rich")])])]),e("li",[e("a",{attrs:{href:"https://docs.python-requests.org/"}},[e("code",{pre:!0},[s._v("requests")])])]),e("li",[e("a",{attrs:{href:"https://kubernetes.io/docs/tasks/tools/"}},[e("code",{pre:!0},[s._v("kubectl")])])]),e("li",[e("a",{attrs:{href:"https://ollama.com"}},[s._v("Ollama")]),s._v(" with "),e("code",{pre:!0},[s._v("llama3")]),s._v(" model")])]),e("h4",[s._v("Install dependencies")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("pip install rich requests\n")])]),e("h4",[s._v("Install and Start Ollama")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("curl -fsSL https://ollama.com/install.sh | sh\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("ollama pull llama3\nollama run llama3\n")])]),e("h1",[s._v("How It Works")]),e("p",[s._v("First we pull in the imports and create a helper function to handle shell commands in string format")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-python"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" argparse\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" subprocess\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" json\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" requests\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" rich.console "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" Console\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" rich.panel "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" Panel\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Initialize rich  ")]),s._v("\nconsole = Console()\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("run_command")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(command)")]),s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""\n    Runs a shell command. If the command succeeds, it returns stdout.\n    If it fails with a CalledProcessError (like a normal kubectl error),\n    it returns stderr so the AI can analyze the error message.\n    For other exceptions, it prints an error and returns an error string.\n    """')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(":\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Using shell=True for simplicity, but be cautious with untrusted input. Not sanitizing command line input here.  ")]),s._v("\n        result = subprocess.run(\n            command,\n            shell="),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("True")]),s._v(",\n            check="),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("True")]),s._v(",\n            capture_output="),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("True")]),s._v(",\n            text="),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("True")]),s._v(",\n            timeout="),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("30")]),s._v("\n        )\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" result.stdout\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("except")]),s._v(" subprocess.CalledProcessError "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" e:\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# This is an expected failure (e.g., `logs --previous` on a new pod).")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# We return the error message for the AI to analyze.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" e.stderr\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("except")]),s._v(" Exception "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" e:\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# For any other kind of error, log it and return a failure message.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# This prevents the whole script from crashing.")]),s._v("\n        error_message = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"An unexpected error occurred running command: '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{command}")]),s._v("\\nError: "),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{e}")]),s._v('"')]),s._v("\n        console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold red]'),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{error_message}")]),s._v('[/bold red]"')]),s._v(")\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" error_message\n")])]),e("h4",[s._v("Finding Failing Pods")]),e("p",[s._v("Next we create a function for Finding Failing Pods")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-python"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("get_failing_pods")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(namespace)")]),s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""Finds all pods in a namespace that are not in a \'Running\' or \'Succeeded\' state."""')]),s._v("\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("f\"\\n[bold cyan]üîç Searching for failing pods in namespace '"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v("'...[/bold cyan]\"")]),s._v(")\n    command = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"kubectl get pods -n '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v(' -o json"')]),s._v("\n    pods_json_str = run_command(command)\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" pods_json_str:\n        console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("f\"[bold red]Could not fetch pods in namespace '"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v("'. No output received.[/bold red]\"")]),s._v(")\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" []\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(":\n        pods_data = json.loads(pods_json_str)\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("except")]),s._v(" json.JSONDecodeError:\n        console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("f\"[bold red]Failed to parse JSON output from kubectl for namespace '"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v("'.[/bold red]\"")]),s._v(")\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# The output might be an error message from kubectl")]),s._v("\n        console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"Received: '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pods_json_str}")]),s._v('"')]),s._v(")\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" []\n\n    failing_pods = []\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" pod "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" pods_data.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"items"')]),s._v(", []):\n        pod_name = pod.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"metadata"')]),s._v(", {}).get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"name"')]),s._v(")\n        phase = pod.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"status"')]),s._v(", {}).get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"phase"')]),s._v(")\n\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Pod phase is not Running, Succeeded, or Completed")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" phase "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" ["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Running"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Succeeded"')]),s._v("]:\n            failing_pods.append(pod_name)\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("continue")]),s._v("\n\n        "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Pod phase is Running, but its containers are not ready or have crashed.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" phase == "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Running"')]),s._v(":\n            container_statuses = pod.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"status"')]),s._v(", {}).get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"containerStatuses"')]),s._v(", [])\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" container_statuses:\n                "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# A running pod should have container statuses. If not, it's an issue.")]),s._v("\n                failing_pods.append(pod_name)\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("continue")]),s._v("\n\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" container "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" container_statuses:\n                "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# If any container is not ready, the pod is considered failing.")]),s._v("\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" container.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ready"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("False")]),s._v("):\n                    failing_pods.append(pod_name)\n                    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Found a failing container, no need to check others in this pod.")]),s._v("\n\n                "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Explicitly check for terminated state with non-zero exit code")]),s._v("\n                terminated_state = container.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"state"')]),s._v(", {}).get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"terminated"')]),s._v(")\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" terminated_state "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("and")]),s._v(" terminated_state.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"exitCode"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(") != "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(":\n                    failing_pods.append(pod_name)\n                    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Remove duplicates that might occur if a pod is both 'not ready' and has other issues.")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" sorted(list(set(failing_pods)))\n")])]),e("p",[s._v("The script runs:")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("kubectl get pods -n <namespace> -o json\n")])]),e("p",[s._v("It filters out pods not in "),e("code",{pre:!0},[s._v('"Running"')]),s._v(" or "),e("code",{pre:!0},[s._v('"Succeeded"')]),s._v(" phase, and checks:")]),e("ul",[e("li",[s._v("Missing or unhealthy container statuses")]),e("li",[s._v("Containers not "),e("code",{pre:!0},[s._v("ready")])]),e("li",[s._v("Terminated containers with non-zero exit codes")])]),e("h4",[s._v("Collect Diagnostics")]),e("p",[s._v("Next we Collect Diagnostics")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-python"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("get_pod_diagnostics")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(pod_name, namespace="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"default"')]),s._v(")")]),s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""Gathers describe, logs, and events for a given pod."""')]),s._v("\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("f\"[bold cyan]üîç Gathering diagnostics for pod '"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v("' in namespace '"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v("'...[/bold cyan]\"")]),s._v(")\n\n    diagnostics = {}\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Get pod  description")]),s._v("\n    diagnostics["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"describe"')]),s._v("] = run_command("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"kubectl describe pod '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v(" -n "),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v('"')]),s._v(")\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Get pod logs (including previous container if it crashed)")]),s._v("\n    diagnostics["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"logs"')]),s._v("] = run_command("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"kubectl logs '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v(" -n "),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v(' --all-containers=true"')]),s._v(")\n    diagnostics["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"previous_logs"')]),s._v("] = run_command(\n        "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"kubectl logs '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v(" -n "),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v(' --all-containers=true --previous"')]),s._v(")\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Get relevant events in the namespace")]),s._v("\n    uid_command = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"kubectl get pod '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v(" -n "),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v(" -o jsonpath='{{.metadata.uid}}'\"")]),s._v("\n    pod_uid = run_command(uid_command).strip()\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" pod_uid "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("and")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'error'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" pod_uid.lower():\n        diagnostics["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"events"')]),s._v("] = run_command(\n            "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"kubectl get events -n '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v(" --field-selector involvedObject.uid="),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_uid}")]),s._v('"')]),s._v(")\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(":\n        diagnostics["),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"events"')]),s._v("] = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Could not retrieve pod UID to filter events."')]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" diagnostics\n")])]),e("p",[s._v("For each failing pod, it gathers:")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("kubectl describe pod <pod-name> -n <namespace>\nkubectl logs <pod-name> -n <namespace> --all-containers\nkubectl logs <pod-name> -n <namespace> --all-containers --previous\n")])]),e("p",[s._v("And also filters relevant events:")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("kubectl get events -n <namespace> --field-selector involvedObject.uid=<uid>\n")])]),e("h4",[s._v("Analyze with Ollama")]),e("p",[s._v("Next we create a AI prompt with the diagnostic data and pass it to Ollama that is running locally")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-python"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("analyze_with_ollama")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("(diagnostics, pod_name)")]),s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"""Sends diagnostics to Ollama for analysis and streams the response."""')]),s._v("\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("f\"[bold cyan]üß† Analyzing diagnostics for '"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v("' with Ollama...[/bold cyan]\"")]),s._v(")\n\n    prompt = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"""\nYou are an expert Kubernetes Site Reliability Engineer (SRE). Your task is to diagnose a failing pod based on the following `kubectl` outputs.\n\nAnalyze the provided data and perform the following steps:\n1.  **Identify the Root Cause:** State the most likely root cause of the problem in a single, concise sentence.\n2.  **Provide a Detailed Explanation:** Explain your reasoning. Reference specific lines from the logs, events, or pod description to support your conclusion.\n3.  **Suggest a Next Step:** Recommend a single, concrete `kubectl` command or action for the user to take next to fix or further investigate the issue.\n\nHere is the diagnostic information:\n\n---\n### 1. KUBECTL DESCRIBE POD:\n'),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{diagnostics.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'describe'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Not available'")]),s._v(")}")]),s._v("\n---\n### 2. KUBECTL LOGS (Current Container):\n"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{diagnostics.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'logs'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Not available'")]),s._v(")}")]),s._v("\n---\n### 3. KUBECTL LOGS (Previous Container):\n"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{diagnostics.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'previous_logs'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Not available'")]),s._v(")}")]),s._v("\n---\n### 4. KUBECTL GET EVENTS:\n"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{diagnostics.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'events'")]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'Not available'")]),s._v(")}")]),s._v('\n---\n\nProvide your analysis in a clear, easy-to-read format.\n"""')]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Use a Panel to visually separate the analysis for each pod")]),s._v("\n    panel = Panel("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[italic]Waiting for AI response for [bold]'),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v('[/bold]...[/italic]"')]),s._v(",\n                  title="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold green]AI Diagnosis for '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v('[/bold green]"')]),s._v(", border_style="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"green"')]),s._v(")\n    console.print(panel)\n\n    full_response = "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("try")]),s._v(":\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("with")]),s._v(" requests.post(\n                "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"http://localhost:11434/api/generate"')]),s._v(",\n                json={\n                    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"model"')]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"llama3"')]),s._v(",\n                    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"prompt"')]),s._v(": prompt,\n                    "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"stream"')]),s._v(": "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("True")]),s._v("\n                },\n                stream="),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("True")]),s._v(",\n                timeout="),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("300")]),s._v("\n        ) "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" response:\n            response.raise_for_status()\n\n            console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"\\n[bold green]AI Analysis for '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{pod_name}")]),s._v(':[/bold green]"')]),s._v(")\n            "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" line "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" response.iter_lines():\n                "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" line:\n                    chunk = json.loads(line)\n                    content = chunk.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"response"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(")\n                    full_response += content\n                    console.print(content, end="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(", style="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"white"')]),s._v(")\n                    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" chunk.get("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"done"')]),s._v("):\n                        console.print()\n                        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" full_response\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("except")]),s._v(" requests.exceptions.RequestException "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" e:\n        console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"\\n[bold red]Error connecting to Ollama API: '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{e}")]),s._v('[/bold red]"')]),s._v(")\n        console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("\"Please ensure Ollama is running and the 'llama3' model is available (`ollama pull llama3`).\"")]),s._v(")\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("None")]),s._v("\n\n")])]),e("p",[s._v("It streams this prompt to Ollama's local API running the "),e("code",{pre:!0},[s._v("llama3")]),s._v(" model and prints the response.")]),e("h4",[s._v("Bring it all together")]),e("p",[s._v("In the main function we")]),e("ul",[e("li",[s._v("setup the prompt")]),e("li",[s._v("handle the namespace arguments.")]),e("li",[s._v("We then call the "),e("code",{pre:!0},[s._v("get_failing_pods(namespace)")]),s._v(" function to find the failing pods")]),e("li",[s._v("We then call "),e("code",{pre:!0},[s._v("get_pod_diagnostics(pod_name, namespace)")]),s._v(" to get the kubectl diagnostic information")]),e("li",[s._v("Finally we call "),e("code",{pre:!0},[s._v("analyze_with_ollama(pod_diagnostics, pod_name)")]),s._v(" to pass in the diagnostic data and build the AI prompt and query the AI(ollama) api endpoint for answers.")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-python"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" __name__ == "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"__main__"')]),s._v(":\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888      .d8888b.                     888                888 [/bold cyan] "')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888     d88P  Y88b                    888                888 [/bold cyan]"')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888     Y88b. d88P                    888                888 [/bold cyan]"')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888  888 \\"Y88888\\" .d8888b         .d88888 .d88b.  .d8888b888888 .d88b. 888d888\\" [/bold cyan]"')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888 .88P.d8P\\"\\"Y8b.88K            d88\\" 888d88\\"\\"88bd88P\\"   888   d88\\"\\"88b888P\\" [/bold cyan]"')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888888K 888    888\\"Y8888b.888888 888  888888  888888     888   888  888888 [/bold cyan]"')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888 \\"88bY88b  d88P     X88       Y88b 888Y88..88PY88b.   Y88b. Y88..88P888 [/bold cyan]"')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold cyan]888  888 \\"Y8888P\\"  88888P\\\'        \\"Y88888 \\"Y88P\\"  \\"Y8888P \\"Y888 \\"Y88P\\" 888    [/bold cyan] "')]),s._v(")\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('" "')]),s._v(")\n    parser = argparse.ArgumentParser(\n        description="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"AI-powered Kubernetes Pod Troubleshooter."')]),s._v(",\n        formatter_class=argparse.RawTextHelpFormatter\n    )\n    parser.add_argument("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"-n"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"--namespace"')]),s._v(", help="),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"The namespace to inspect."')]),s._v(")\n\n    args = parser.parse_args()\n\n    namespace = args.namespace\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" namespace:\n        namespace = console.input("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"[bold yellow]Please enter the Kubernetes namespace: [/bold yellow]"')]),s._v(")\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" namespace:\n            console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"[bold red]Namespace cannot be empty. Exiting.[/bold red]"')]),s._v(")\n            exit("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(")\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Automatically find all failing pods")]),s._v("\n    failing_pods = get_failing_pods(namespace)\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("not")]),s._v(" failing_pods:\n        console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("f\"[bold green]‚úÖ No failing pods found in namespace '"),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{namespace}")]),s._v("'.[/bold green]\"")]),s._v(")\n        exit("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(")\n\n    console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('f"[bold yellow]Found '),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{len(failing_pods)}")]),s._v(" failing pod(s): "),e("span",{pre:!0,attrs:{class:"hljs-subst"}},[s._v("{"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("', '")]),s._v(".join(failing_pods)}")]),s._v('[/bold yellow]"')]),s._v(")\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Loop through each failing pod and diagnose it")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" pod_name "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" failing_pods:\n        pod_diagnostics = get_pod_diagnostics(pod_name, namespace)\n        "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" pod_diagnostics:\n            analyze_with_ollama(pod_diagnostics, pod_name)\n            console.print("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"-"')]),s._v(" * "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("80")]),s._v(")  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Separator for clarity")]),s._v("\n")])]),e("h3",[s._v("Running the script")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("python k8s-doctor.py -n my-namespace\n")])]),e("p",[s._v("If you omit "),e("code",{pre:!0},[s._v("-n")]),s._v(", the script will prompt you to enter a namespace interactively.\n"),e("img",{attrs:{src:"https://github.com/austincunningham/k8s-doctor/raw/master/img/k8s-doctor.png",alt:"screenshot of interactive prompt"}})]),e("h2",[s._v("Code lives here")]),e("blockquote",[e("p",[s._v("View the full Python script on "),e("a",{attrs:{href:"https://github.com/austincunningham/k8s-doctor"}},[s._v("GitHub")])])]),e("p",[s._v("To summarize I am using this script to automate log/event gathering for failed pods, creating a prompt for an AI LLM and returning a response from AI. Is this a wrapper for AI? Is this automation? a bit of both I think.")])])}],r=e("2877"),l={},p=Object(r["a"])(l,t,n,!1,null,null,null);a["default"]=p.exports}}]);
//# sourceMappingURL=chunk-2d0abfad.37bcf472.js.map