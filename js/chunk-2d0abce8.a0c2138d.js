(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0abce8"],{"179e":function(s,e,r){"use strict";r.r(e);var t=function(){var s=this,e=s.$createElement;s._self._c;return s._m(0)},a=[function(){var s=this,e=s.$createElement,r=s._self._c||e;return r("section",[r("h1",[s._v("Running two Kubernetes Operators locally")]),r("p",[r("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvq1ntix4s683l515r7p.png",alt:""}})]),r("p",[s._v("From time to time you may wish to run two or more Kubernetes Operators locally for debugging purposes. If you try and run a second operator locally the second operator will shutdown you will hit an error like")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[s._v("WATCH_NAMESPACE=$(MY-OPERATOR-NAMESPACE) go run ./main.go\n2022-01-07T15:16:11.786Z        INFO    controller-runtime.metrics      metrics server is starting to listen    {"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"addr"')]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('":8383"')]),s._v("}\n2022-01-07T15:16:11.787Z        ERROR   controller-runtime.metrics      metrics server failed to listen. You may want to "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("disable")]),s._v(" the metrics server or use another port "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" it is due to conflicts       {"),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"error"')]),s._v(": "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"error listening on :8383: listen tcp :8383: bind: address already in use"')]),s._v("}\n")])]),r("p",[s._v("So the metric port is already used.The "),r("a",{attrs:{href:"https://sdk.operatorframework.io/"}},[s._v("Operator SDK")]),s._v(" generates ports for metrics and health automatically. These are set in the main.go")]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-golang"}},[r("span",{pre:!0,attrs:{class:"hljs-function"}},[r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("func")]),s._v(" "),r("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("main")]),r("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")])]),s._v(" {\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" metricsAddr "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("string")]),s._v("\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" enableLeaderElection "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("bool")]),s._v("\n\t"),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" probeAddr "),r("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("string")]),s._v("\n    "),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//Change the port numbers on the metrics-bind-address and health-probe-bind-address to a free port number")]),s._v("\n\tflag.StringVar(&metricsAddr, "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"metrics-bind-address"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('":8383"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"The address the metric endpoint binds to."')]),s._v(")\n\tflag.StringVar(&probeAddr, "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"health-probe-bind-address"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('":8081"')]),s._v(", "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"The address the probe endpoint binds to."')]),s._v(")\n")])]),r("p",[s._v("As you can see there are two port assignments here "),r("code",{pre:!0},[s._v("metrics-bind-address")]),s._v(" and "),r("code",{pre:!0},[s._v("health-probe-bind-address")]),s._v(". These ports will be occupied on your machine by the first operator you run. You should change both to a free port numbers if you wish to run a second operator side by side locally, otherwise you will get a port conflict. You should now be able to "),r("a",{attrs:{href:"https://austincunningham.ddns.net/2021/operatorv1vscode"}},[s._v("debug")]),s._v(" both operators at once while running locally. Operators built with an older version of the Operator-sdk won't have the health-probe port.")]),r("blockquote",[r("p",[r("strong",[s._v("NOTE:")]),s._v(" Sometimes the Operator gets stuck shutting down and you have to release the ports manually by killing the stuck process")])]),r("pre",{pre:!0},[r("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Get the process on the port metric port e.g. 8383")]),s._v("\nnetstat -ltnp | grep -w "),r("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("':8383'")]),s._v("\ntcp6       0      0 :::8383   :::*  LISTEN      1480861/main\n"),r("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# kill the stuck process ")]),s._v("\nsudo "),r("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("kill")]),s._v(" -9 1480861\n")])])])}],n=r("2877"),o={},l=Object(n["a"])(o,t,a,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0abce8.a0c2138d.js.map