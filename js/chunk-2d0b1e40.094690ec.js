(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b1e40"],{"227a":function(s,a,e){"use strict";e.r(a);var t=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},r=[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("section",[e("h1",[s._v("AWS simulate killing an Availability Zone")]),e("p",[e("img",{attrs:{src:"https://dev-to-uploads.s3.amazonaws.com/i/1qhsppqsoflzcyq0ewe3.jpg",alt:""}})]),e("p",[s._v("At some stage in development of a high availability application you will want test what happens when an Availability Zone goes down in AWS.")]),e("h2",[s._v("Disabling AZ")]),e("p",[s._v("Blocking all network traffic to AZ seems the best way to simulate this. The method I used was to change the ACL for all the subnets on an AZ to new ACL. The AWS cli creates ACL with Deny All traffic by default for new ACL's.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#!/bin/bash\n")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# prereq")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("#  - jq")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("#  - aws-cli")]),s._v("\n\nAZ=eu-west-1c\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# use the subnetId to get the NetworkAclAssociationId to create the new acl association")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" SUBNETID "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" $(aws ec2 describe-subnets --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v("| jq "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('".Subnets[] | select(.AvailabilityZone==\\"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$AZ")]),s._v('\\")"')]),s._v("  | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.SubnetId'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("do")]),s._v("\n  aws ec2 describe-network-acls --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v("| jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('".[] | .[].Associations[] | select(.SubnetId==\\"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$SUBNETID")]),s._v('\\")"')]),s._v(" | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.NetworkAclAssociationId'")]),s._v(" >> NetworkAclAssociationId.tmp\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Need to take a backup of the original NetworkAclId's to be able to reverse the change")]),s._v("\n  aws ec2 describe-network-acls --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v("| jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('".[] | .[].Associations[] | select(.SubnetId==\\"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$SUBNETID")]),s._v('\\")"')]),s._v(" | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.NetworkAclId'")]),s._v(" >> NetworkAclId-restore.tmp\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("done")]),s._v("\n")])]),e("p",[s._v("As I have multiple VPC I needed to create a different ACL for each VPC .")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# create the dummy ACL and create a file containing the NetworkAclId for the dummy ACL for each VPC")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" VPCID "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" $(aws ec2 describe-subnets --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v(" | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('".Subnets[] | select(.AvailabilityZone==\\"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$AZ")]),s._v('\\")"')]),s._v("  | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.VpcId'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("do")]),s._v("\n  aws ec2 create-network-acl --vpc-id "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$VPCID")]),s._v(" --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v(" | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.NetworkAcl.NetworkAclId'")]),s._v(" >> NetworkAclId.tmp\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("done")]),s._v("\n")])]),e("p",[s._v("I then created a function that takes the lists of NetworkAclAssociationId and NetworkAclId and changes the ACL association")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Function ChangeAcl takes two arguments for disable or enable")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# $1 should be NetworkAclAssociationId filename")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# $2 should be NetworkAclId filename")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ChangeAcl")])]),s._v("() {\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# needed to read from two files so used a count to poll through the lines of the second file")]),s._v("\n  count=1\n  cat "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$1")]),s._v(" | "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("read")]),s._v(" NetworkAclAssociationId\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("do")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" $(sed -n "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${count}")]),s._v('p"')]),s._v(" < "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$2")]),s._v(")\n    "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$NetworkAclAssociationId")]),s._v("\n    aws ec2 replace-network-acl-association --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v(" --association-id "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$NetworkAclAssociationId")]),s._v(" --network-acl-id $(sed -n "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${count}")]),s._v('p"')]),s._v(" < "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$2")]),s._v(")\n    ((count=count+1))\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("done")]),s._v("\n}\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Call the function to create new disable ACL association")]),s._v("\nChangeAcl NetworkAclAssociationId.tmp NetworkAclId.tmp\n")])]),e("p",[s._v("At this point I have disable all traffic to a particular AZ and now I can check if resources are redistributed as expected and there is no downtime.")]),e("h2",[s._v("Re-enabling again")]),e("p",[s._v("It takes a few extra steps to re-enable again")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-bash"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Get the new networkAclAssociationId for the subnets")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" SUBNETID "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("in")]),s._v(" $(aws ec2 describe-subnets --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v(" | jq "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('".Subnets[] | select(.AvailabilityZone==\\"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$AZ")]),s._v('\\")"')]),s._v(" | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.SubnetId'")]),s._v(")\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("do")]),s._v("\n  aws ec2 describe-network-acls --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v(" | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('".[] | .[].Associations[] | select(.SubnetId==\\"'),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$SUBNETID")]),s._v('\\")"')]),s._v(" | jq -r "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'.NetworkAclAssociationId'")]),s._v(" >> NetworkAclAssociationId-restore.tmp\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("done")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# Restore the subnets to the original ACL's")]),s._v("\nChangeAcl NetworkAclAssociationId-restore.tmp NetworkAclId-restore.tmp\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("# delete the dummy ACL's")]),s._v("\ncat NetworkAclId.tmp | "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("read")]),s._v(" deleteNetworkAclId\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("do")]),s._v("\n  aws ec2 delete-network-acl --network-acl-id "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("$deleteNetworkAclId")]),s._v(" --region "),e("span",{pre:!0,attrs:{class:"hljs-variable"}},[s._v("${AZ%?}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("done")]),s._v("\n")])]),e("p",[s._v("That's it, all traffic should be restored to original configuration.")])])}],n=e("2877"),l={},c=Object(n["a"])(l,t,r,!1,null,null,null);a["default"]=c.exports}}]);
//# sourceMappingURL=chunk-2d0b1e40.094690ec.js.map